---
title: "**Prices, Returns, and Volatilities**"
author: Steve Leo
date: today

format:
  pdf:
    documentclass: article
    geometry:
        - a4paper
        - margin=1in 
    toc: false
    number-sections: true
    colorlinks: true

pdf-engine: xelatex

highlight-style: ayu
code-block-bg: true
code-block-border-left: "#31BAE9"

include-in-header: 
      text: |
        \usepackage{fontspec}
        \usepackage{xunicode}
        \usepackage{xltxtra}
        \usepackage{fvextra}

        \setmainfont{Miller Text}
        \setmonofont{Hack Nerd Font Mono}

        \DefineVerbatimEnvironment{Highlighting}{Verbatim}{
          commandchars=\\\{\},
          breaklines, breaknonspaceingroup, breakanywhere
        }
---

# Introduction

```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import yfinance as yf

plt.rcParams.update({
    "text.usetex": True,
    "font.family": "Palatino",
    "font.size": 8,

    "axes.labelsize": 8,
    "xtick.labelsize": 8,
    "ytick.labelsize": 8,
    "axes.xmargin": 0,

    "lines.linewidth": 1,

    "axes.grid": True,
    "grid.color": "gray",
    "grid.alpha": 0.5,
    "grid.linewidth": 0.5
})
```

# Prices and Its Logarithm
We denote the price of an asset by $p_t$, where $t$ is the time index corresponding to arbitrary periods such as minutes, hours, days, weeks, months, quarters, or years.

In many cases, the logarithm of the price is mathematically more convenient:
$$
y_t \triangleq \log{p_t}
$${#eq-price-log}
Using the logarithm has an additional advantage that a much wider range of 
variation can be represented because the tiny values are amplified and the large values are attenuated.

@fig-sp500-log illustrates the daily close prices and their logarithms of the S&P 500 Index.

```{python}
#| warning: false
#| label: fig-sp500-log
#| fig-cap: "Price and Log Price of S&P 500"

symbol = yf.Ticker("^GSPC")
sp500 = symbol.history(start="1999-12-31", end="2025-06-30")
sp500["Log Price"] = np.log(sp500["Close"])
sp500 = sp500[["Close", "Log Price"]]
sp500.rename(columns={"Close": "Price"}, inplace=True)

fig, (ax1, ax2) = plt.subplots(2, sharex=True)
ax1.plot(sp500["Price"])
ax2.plot(sp500["Log Price"], color="orange")
```

# Returns
The *linear return*, or simple return,  is defined as
$$
r_t^{\text{lin}} \triangleq \frac{p_t - p_{t-1}}{p_t} = \frac{p_t}{p_{t-1}} - 1
$${#eq-linear-return}

The linear return has the property that it is additive among the assets. The overall linear return of a portfolio of several assets equals the weighted sum of the linear returns of each asset, with the percentages invested in each asset as the weights.

The *log-return*, or continuously compounded return, is defined as
$$
r_t^{\text{log}} \triangleq y_t - y_{t-1} = \log{\left(\frac{p_t}{p_{t-1}}\right)}
$${#eq-log-return}

The log-return has the property that it is additive along the time domain. The log-return of a long period equals the sum of the log-returns of the basic periods within the long period.

The linear return and log-return are related as
$$
r_t^{\text{log}} = \log{\left(r_t^{\text{lin}} + 1\right)}
$${#eq-2returns}
which leads to the approximation $r_t^{\text{log}} \approx r_t^{\text{lin}}$, when $r_t^{\text{lin}}$ is near 0, as shown in @fig-2returns. Acturally, the approximation is almost perfect when the magnitude of the return is less than 5%, see @fig-2returns-diff.
```{python}
#| warning: false
#| label: fig-2returns
#| fig-cap: "Approximation of Log-Return and Linear Return"

r = np.arange(-0.2, 0.2, 0.01)
logr = np.log(r + 1)

plt.plot(r, r, label="Linear Return")
plt.plot(r, logr, label="Log-Return")
plt.legend(loc=(0.7, 0.14))
```

```{python}
#| warning: false
#| label: fig-2returns-diff
#| fig-cap: "Difference of Linear Return and Log-Return"

plt.plot(r, r-logr)
```

Usually we have price data, to calculate returns we can utilize the `pct_change()` and `shift()` methods of the `DataFrame` object:
```{python}
#| warning: false
#| label: tbl-return-calc
#| tbl-cap: "S&P 500 Daily Return Calculation"

# Calculate the linear return
sp500["Linear Return"] = sp500["Price"].pct_change()

# Calculate the log-return with diff the log-price
sp500["Log-Return 1"] = np.log(sp500["Price"]) - np.log(sp500["Price"]).shift()

# Calculate the log-return using its relationship with linear return
sp500["Log-Return 2"] = np.log(sp500["Linear Return"] + 1) 

# Show results
sp500.dropna().round(4)
```

The return usually exhibits some degree of stationarity, as @fig-sp500-returns shows.
```{python}
#| warning: false
#| label: fig-sp500-returns
#| fig-cap: "Daily Linear Returns and Log-Returns of S&P 500"

fig, (ax1, ax2) = plt.subplots(2, sharex=True)
ax1.plot(sp500["Linear Return"])
ax2.plot(sp500["Log-Return 1"], color="orange")
```

# Volatilities
